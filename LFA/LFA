{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LFA","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNFq2+zyDk0eiNTbWwAXiey"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S64joHpMWnB6","executionInfo":{"status":"ok","timestamp":1618185763006,"user_tz":180,"elapsed":2911,"user":{"displayName":"Gustavo Melo","photoUrl":"","userId":"02406671554805147286"}},"outputId":"7409ab32-9354-41a6-9f4b-480abda9771b"},"source":["#IMPLEMENTAÇÃO DO DFA\n","\n","from automata.base.automaton import Automaton\n","from automata.fa.fa import FA\n","from automata.fa.dfa import DFA\n","from automata.fa.nfa import NFA\n","\n","resultado = input(\"Qual o valor: \")\n","if(resultado == '1'):\n","\n","  # O algoritmo tem como objetivo verificar se existe uma sequencia ímpar de 1's.\n","\n","  dfa = DFA(\n","      states={'q0', 'q1', 'q2'}, #Quantidade de estados que desejar.\n","      input_symbols={'0', '1'}, #Quais os símbolos do alfabeto deseja usar.\n","      transitions={ #Transições: 1 - Estado, 2 - Valor a verificar, 3 - Estado que deve permanecer ou mudar, 4 = 2 e 5 = 3.\n","          'q0': {'0': 'q0', '1': 'q1'},\n","          'q1': {'0': 'q0', '1': 'q2'},\n","          'q2': {'0': 'q2', '1': 'q1'}\n","      },\n","      initial_state='q0', #Indicar o estado inicial.\n","      final_states={'q1'} #Indicar o estado final.\n","  )\n","\n","  print('Resultado do DFA: ')\n","  if dfa.accepts_input('111111101110111'): #Coloque uma sequência binária que deseja testar.\n","      print('accepted')\n","  else:\n","      print('rejected')\n","\n","#IMPLEMENTAÇÃO DO NFA\n","\n","elif (resultado == '2' ):\n","  # O algoritmo tem como objetivo verificar palavras começando com a e terminando com a e que não tenham duas letras b consecutivas.\n","\n","  nfa = NFA(\n","      states={'q0', 'q1', 'q2'}, #Quantidade de estados que desejar.\n","      input_symbols={'a', 'b'}, #Quais os símbolos do alfabeto deseja usar.\n","      transitions={ #Transições: 1 - Estado, 2 - Valor a verificar, 3 - Estado que deve permanecer ou mudar, 4 = 2 e 5 = 3.\n","          'q0': {'a': {'q1'}},\n","          'q1': {'a': {'q1'}, '': {'q2'}}, #Utilizar '' para transições vazias.\n","          'q2': {'b': {'q0'}}\n","      },\n","      initial_state='q0',\n","      final_states={'q1'}\n","      \n","  )\n","\n","  dfa = DFA.from_nfa(nfa) #Conversão do NFA em DFA e printando o resultado.\n","\n","  print('Resultado do NFA: ')\n","  if nfa.accepts_input('ababab'):\n","      print('accepted')\n","  else:\n","      print('rejected')"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Qual o valor: 2\n","Resultado do NFA: \n","rejected\n"],"name":"stdout"}]}]}